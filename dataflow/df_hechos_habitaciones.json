{
	"name": "df_hechos_habitaciones",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "airbnb_csv",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "dim_ubicacion",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "dim_details_tipo_habitacion",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dim_hechos_habitaciones",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          City as string,",
				"          Price as string,",
				"          Day as string,",
				"          {Room Type} as string,",
				"          {Shared Room} as boolean,",
				"          {Private Room} as boolean,",
				"          {Person Capacity} as integer,",
				"          Superhost as string,",
				"          {Multiple Rooms} as boolean,",
				"          Business as string,",
				"          {Cleanliness Rating} as string,",
				"          {Guest Satisfaction} as integer,",
				"          Bedrooms as integer,",
				"          {City Center (km)} as string,",
				"          {Metro Distance (km)} as string,",
				"          {Attraction Index} as string,",
				"          {Normalised Attraction Index} as string,",
				"          {Restraunt Index} as string,",
				"          {Normalised Restraunt Index} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          id as integer,",
				"          city_center as decimal(20,16),",
				"          metro_distance as decimal(20,16)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          id as integer,",
				"          tipo_habitacion as string,",
				"          bedrooms as integer,",
				"          shared_room as boolean,",
				"          private_room as boolean,",
				"          multiple_room as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source1 select(mapColumn(",
				"          City,",
				"          Price,",
				"          Day,",
				"          {City Center (km)},",
				"          {Person Capacity},",
				"          {Guest Satisfaction},",
				"          {Metro Distance (km)},",
				"          {Room Type},",
				"          {Shared Room},",
				"          {Private Room},",
				"          {Multiple Rooms},",
				"          Bedrooms",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(Price = toFloat(replace(Price, ',','.')),",
				"          {City Center (km)} = toFloat(replace({City Center (km)}, ',','.')),",
				"          {Metro Distance (km)} = toFloat(replace({Metro Distance (km)}, ',','.'))) ~> derivedColumn1",
				"derivedColumn1, source2 join({City Center (km)} == city_center",
				"     && {Metro Distance (km)} == metro_distance,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, source3 join({Room Type} == tipo_habitacion",
				"     && {Shared Room} == shared_room",
				"     && select1@Bedrooms == source3@bedrooms",
				"     && {Private Room} == private_room",
				"     && {Multiple Rooms} == multiple_room,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          City,",
				"          Price,",
				"          Day,",
				"          {Person Capacity},",
				"          {Guest Satisfaction},",
				"          id_habitacion = source2@id,",
				"          id_ubi = source3@id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          ciudad as string,",
				"          dia as string,",
				"          precio as decimal(20,16),",
				"          capacidad as integer,",
				"          guest_satisfaction as integer,",
				"          id_details_tipo_habitacion as integer,",
				"          id_ubicacion as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ciudad = City,",
				"          dia = Day,",
				"          precio = Price,",
				"          capacidad = {Person Capacity},",
				"          guest_satisfaction = {Guest Satisfaction},",
				"          id_details_tipo_habitacion = id_habitacion,",
				"          id_ubicacion = id_ubi",
				"     )) ~> sink1"
			]
		}
	}
}